import { useState } from "react";
import Navbar from "../components/Navbar";
import Sidebar from "../components/Sidebar";
import StatsCard from "../components/StatsCard";
import DataTable from "../components/DataTable";
import Modal from "../components/Modal";

type Tab = "overview" | "checkin" | "checkout" | "verify" | "payment";

// Mock data for staff
const mockVehiclesAtStation = [
  { id: "EV001", type: "VinFast VF8", plate: "29A-12345", battery: "85%", status: "available", nextBooking: "14:00" },
  { id: "EV002", type: "Tesla Model 3", plate: "29A-67890", battery: "92%", status: "rented", returnTime: "16:30" },
  { id: "EV003", type: "Hyundai Kona", plate: "29B-11111", battery: "45%", status: "charging", estFull: "11:30" },
  { id: "EV009", type: "VinFast VF9", plate: "29E-99999", battery: "100%", status: "available", nextBooking: "-" },
];

const mockPendingCheckIns = [
  { bookingId: "BK001", customer: "Nguy·ªÖn VƒÉn A", phone: "0901234567", vehicle: "EV001", time: "14:00", verified: true },
  { bookingId: "BK003", customer: "L√™ VƒÉn C", phone: "0923456789", vehicle: "EV009", time: "15:30", verified: false },
];

const mockPendingCheckOuts = [
  { bookingId: "BK002", customer: "Tr·∫ßn Th·ªã B", phone: "0912345678", vehicle: "EV002", returnTime: "16:30", duration: "2 ng√†y" },
];

const mockPayments = [
  { id: "PAY001", customer: "Nguy·ªÖn VƒÉn A", amount: 1200000, type: "rental", status: "paid" },
  { id: "PAY002", customer: "Tr·∫ßn Th·ªã B", amount: 500000, type: "deposit", status: "pending" },
  { id: "PAY003", customer: "Ph·∫°m Th·ªã D", amount: 200000, type: "extra", status: "paid" },
];

export default function StaffPage() {
  const [tab, setTab] = useState<Tab>("overview");
  const [selectedItem, setSelectedItem] = useState<any>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [checkInForm, setCheckInForm] = useState({ photos: [] as string[], notes: "" });
  const [verifyForm, setVerifyForm] = useState({ licenseVerified: false, idVerified: false });
  const [deleteModalOpen, setDeleteModalOpen] = useState(false);
  const [itemToDelete, setItemToDelete] = useState<any>(null);

  const handleCheckIn = (booking: any) => {
    setSelectedItem(booking);
    setIsModalOpen(true);
  };

  const handleCheckOut = (booking: any) => {
    setSelectedItem(booking);
    setIsModalOpen(true);
  };

  const handleVerify = (booking: any) => {
    setSelectedItem(booking);
    setIsModalOpen(true);
  };

  const handleDelete = (item: any, e?: React.MouseEvent) => {
    e?.stopPropagation();
    setItemToDelete(item);
    setDeleteModalOpen(true);
  };

  const handleConfirmDelete = () => {
    // TODO: G·ªçi API ƒë·ªÉ x√≥a
    console.log("Deleting:", itemToDelete);
    setDeleteModalOpen(false);
  };

  const getStatusBadge = (status: string) => {
    const colors: Record<string, string> = {
      available: "#10b981",
      rented: "#f59e0b",
      charging: "#3b82f6",
      paid: "#10b981",
      pending: "#f59e0b",
    };
    return (
      <span
        style={{
          padding: "4px 12px",
          borderRadius: "12px",
          fontSize: "12px",
          fontWeight: 600,
          background: colors[status] + "20",
          color: colors[status],
        }}
      >
        {status === "available" && "S·∫µn s√†ng"}
        {status === "rented" && "ƒêang thu√™"}
        {status === "charging" && "ƒêang s·∫°c"}
        {status === "paid" && "ƒê√£ thanh to√°n"}
        {status === "pending" && "Ch·ªù thanh to√°n"}
      </span>
    );
  };

  const sidebarItems = [
    { key: "overview", label: "T·ªïng quan", icon: "üìä" },
    { key: "checkin", label: "Giao xe", icon: "üì•" },
    { key: "checkout", label: "Nh·∫≠n xe", icon: "üì§" },
    { key: "verify", label: "X√°c th·ª±c KH", icon: "‚úÖ" },
    { key: "payment", label: "Thanh to√°n", icon: "üí≥" },
  ];

  return (
    <>
      <Navbar />
      <div className="container" style={{ paddingTop: "24px" }}>
        <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center", marginBottom: "24px" }}>
          <div>
            <h1 style={{ margin: 0, color: "var(--primary-700)" }}>Qu·∫£n l√Ω ƒëi·ªÉm thu√™</h1>
            <p className="subtitle" style={{ marginTop: "4px" }}>
              ƒêi·ªÉm thu√™: <strong>Qu·∫≠n 1</strong> ‚Ä¢ Nh√¢n vi√™n: <strong>Nguy·ªÖn Minh E</strong>
            </p>
          </div>
          <div style={{ display: "flex", gap: "8px" }}>
            <button className="btn btn-ghost">üìû Li√™n h·ªá Admin</button>
            <button className="btn btn-primary">üö® B√°o c√°o s·ª± c·ªë</button>
          </div>
        </div>

        {/* Layout with Sidebar */}
        <div style={{ display: "flex", gap: "24px" }}>
          <Sidebar items={sidebarItems} activeKey={tab} onSelect={(key) => setTab(key as Tab)} />

          {/* Content Area */}
          <div style={{ flex: 1, minWidth: 0 }}>
            {/* Overview Tab */}
            {tab === "overview" && (
          <>
            <div style={{ display: "grid", gridTemplateColumns: "repeat(auto-fit, minmax(240px, 1fr))", gap: "16px", marginBottom: "24px" }}>
              <StatsCard title="Xe t·∫°i ƒëi·ªÉm" value="24" icon="üöó" />
              <StatsCard title="Xe ƒëang thu√™" value="9" change="37.5% s·ª≠ d·ª•ng" trend="neutral" icon="üîë" />
              <StatsCard title="Ch·ªù giao xe" value={mockPendingCheckIns.length} icon="üì•" />
              <StatsCard title="Ch·ªù nh·∫≠n xe" value={mockPendingCheckOuts.length} icon="üì§" />
            </div>

            <div className="card" style={{ padding: "20px", marginBottom: "16px" }}>
              <h3 style={{ marginTop: 0, color: "var(--primary-700)" }}>Xe t·∫°i ƒëi·ªÉm ({mockVehiclesAtStation.length})</h3>
              <DataTable
                columns={[
                  { key: "id", label: "M√£ xe" },
                  { key: "type", label: "Lo·∫°i xe" },
                  { key: "plate", label: "Bi·ªÉn s·ªë" },
                  { key: "battery", label: "Pin" },
                  { key: "status", label: "Tr·∫°ng th√°i", render: (val) => getStatusBadge(val) },
                  {
                    key: "nextBooking",
                    label: "ƒê·∫∑t tr∆∞·ªõc",
                    render: (val) => (val !== "-" ? val : <span style={{ color: "var(--muted)" }}>-</span>),
                  },
                  {
                    key: "actions",
                    label: "Thao t√°c",
                    render: (_, row) => (
                      <button
                        className="btn btn-ghost"
                        style={{ fontSize: "13px", padding: "6px 12px", color: "#ef4444" }}
                        onClick={(e) => handleDelete(row, e)}
                      >
                        üóëÔ∏è X√≥a
                      </button>
                    ),
                  },
                ]}
                data={mockVehiclesAtStation}
              />
            </div>

            <div style={{ display: "grid", gridTemplateColumns: "1fr 1fr", gap: "16px" }}>
              <div className="card" style={{ padding: "20px" }}>
                <h3 style={{ marginTop: 0, color: "var(--primary-700)" }}>L·ªãch giao xe h√¥m nay</h3>
                <div style={{ display: "flex", flexDirection: "column", gap: "12px" }}>
                  {mockPendingCheckIns.map((booking) => (
                    <div
                      key={booking.bookingId}
                      style={{
                        padding: "12px",
                        background: "var(--bg-secondary)",
                        borderRadius: "8px",
                        display: "flex",
                        justifyContent: "space-between",
                        alignItems: "center",
                      }}
                    >
                      <div>
                        <div style={{ fontWeight: 600, marginBottom: "4px" }}>{booking.customer}</div>
                        <div style={{ fontSize: "13px", color: "var(--muted)" }}>
                          {booking.vehicle} ‚Ä¢ {booking.time}
                        </div>
                      </div>
                      <button className="btn btn-primary" style={{ fontSize: "13px" }} onClick={() => handleCheckIn(booking)}>
                        Giao xe
                      </button>
                    </div>
                  ))}
                </div>
              </div>

              <div className="card" style={{ padding: "20px" }}>
                <h3 style={{ marginTop: 0, color: "var(--primary-700)" }}>L·ªãch nh·∫≠n xe h√¥m nay</h3>
                <div style={{ display: "flex", flexDirection: "column", gap: "12px" }}>
                  {mockPendingCheckOuts.map((booking) => (
                    <div
                      key={booking.bookingId}
                      style={{
                        padding: "12px",
                        background: "var(--bg-secondary)",
                        borderRadius: "8px",
                        display: "flex",
                        justifyContent: "space-between",
                        alignItems: "center",
                      }}
                    >
                      <div>
                        <div style={{ fontWeight: 600, marginBottom: "4px" }}>{booking.customer}</div>
                        <div style={{ fontSize: "13px", color: "var(--muted)" }}>
                          {booking.vehicle} ‚Ä¢ {booking.returnTime}
                        </div>
                      </div>
                      <button className="btn btn-primary" style={{ fontSize: "13px" }} onClick={() => handleCheckOut(booking)}>
                        Nh·∫≠n xe
                      </button>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </>
        )}

        {/* Check-in Tab */}
        {tab === "checkin" && (
          <div className="card" style={{ padding: "20px" }}>
            <h3 style={{ marginTop: 0, color: "var(--primary-700)" }}>Danh s√°ch ch·ªù giao xe</h3>
            <DataTable
              columns={[
                { key: "bookingId", label: "M√£ ƒë·∫∑t" },
                { key: "customer", label: "Kh√°ch h√†ng" },
                { key: "phone", label: "SƒêT" },
                { key: "vehicle", label: "Xe" },
                { key: "time", label: "Gi·ªù nh·∫≠n" },
                {
                  key: "verified",
                  label: "X√°c th·ª±c",
                  render: (val) => (val ? "‚úÖ ƒê√£ x√°c th·ª±c" : "‚è≥ Ch∆∞a x√°c th·ª±c"),
                },
                {
                  key: "actions",
                  label: "Thao t√°c",
                  render: (_, row) => (
                    <button className="btn btn-primary" style={{ fontSize: "13px" }} onClick={() => handleCheckIn(row)}>
                      Giao xe
                    </button>
                  ),
                },
              ]}
              data={mockPendingCheckIns}
            />
          </div>
        )}

        {/* Check-out Tab */}
        {tab === "checkout" && (
          <div className="card" style={{ padding: "20px" }}>
            <h3 style={{ marginTop: 0, color: "var(--primary-700)" }}>Danh s√°ch ch·ªù nh·∫≠n xe</h3>
            <DataTable
              columns={[
                { key: "bookingId", label: "M√£ ƒë·∫∑t" },
                { key: "customer", label: "Kh√°ch h√†ng" },
                { key: "phone", label: "SƒêT" },
                { key: "vehicle", label: "Xe" },
                { key: "returnTime", label: "Gi·ªù tr·∫£" },
                { key: "duration", label: "Th·ªùi gian thu√™" },
                {
                  key: "actions",
                  label: "Thao t√°c",
                  render: (_, row) => (
                    <button className="btn btn-primary" style={{ fontSize: "13px" }} onClick={() => handleCheckOut(row)}>
                      Nh·∫≠n xe
                    </button>
                  ),
                },
              ]}
              data={mockPendingCheckOuts}
            />
          </div>
        )}

        {/* Verify Tab */}
        {tab === "verify" && (
          <div className="card" style={{ padding: "20px" }}>
            <h3 style={{ marginTop: 0, color: "var(--primary-700)" }}>Kh√°ch h√†ng ch·ªù x√°c th·ª±c</h3>
            <DataTable
              columns={[
                { key: "bookingId", label: "M√£ ƒë·∫∑t" },
                { key: "customer", label: "H·ªç t√™n" },
                { key: "phone", label: "SƒêT" },
                {
                  key: "verified",
                  label: "Tr·∫°ng th√°i",
                  render: (val) =>
                    val ? (
                      <span style={{ color: "#10b981", fontWeight: 600 }}>‚úÖ ƒê√£ x√°c th·ª±c</span>
                    ) : (
                      <span style={{ color: "#f59e0b", fontWeight: 600 }}>‚è≥ Ch·ªù x√°c th·ª±c</span>
                    ),
                },
                {
                  key: "actions",
                  label: "Thao t√°c",
                  render: (_, row) =>
                    !row.verified && (
                      <button className="btn btn-primary" style={{ fontSize: "13px" }} onClick={() => handleVerify(row)}>
                        X√°c th·ª±c
                      </button>
                    ),
                },
              ]}
              data={mockPendingCheckIns}
            />
          </div>
        )}

        {/* Payment Tab */}
        {tab === "payment" && (
          <div className="card" style={{ padding: "20px" }}>
            <h3 style={{ marginTop: 0, color: "var(--primary-700)" }}>Qu·∫£n l√Ω thanh to√°n</h3>
            <DataTable
              columns={[
                { key: "id", label: "M√£ thanh to√°n" },
                { key: "customer", label: "Kh√°ch h√†ng" },
                {
                  key: "amount",
                  label: "S·ªë ti·ªÅn",
                  render: (val) => (val / 1000).toFixed(0) + "K VNƒê",
                },
                {
                  key: "type",
                  label: "Lo·∫°i",
                  render: (val) =>
                    val === "rental" ? "Ph√≠ thu√™" : val === "deposit" ? "ƒê·∫∑t c·ªçc" : "Ph·ª• ph√≠",
                },
                { key: "status", label: "Tr·∫°ng th√°i", render: (val) => getStatusBadge(val) },
                {
                  key: "actions",
                  label: "Thao t√°c",
                  render: (_, row) =>
                    row.status === "pending" && (
                      <button className="btn btn-primary" style={{ fontSize: "13px" }}>
                        X√°c nh·∫≠n
                      </button>
                    ),
                },
              ]}
              data={mockPayments}
            />
          </div>
        )}
          </div>
        </div>
      </div>

      {/* Check-in/out Modal */}
      <Modal
        isOpen={isModalOpen && (tab === "checkin" || tab === "checkout")}
        onClose={() => setIsModalOpen(false)}
        title={tab === "checkin" ? "Giao xe cho kh√°ch h√†ng" : "Nh·∫≠n xe t·ª´ kh√°ch h√†ng"}
        maxWidth={700}
        footer={
          <>
            <button className="btn btn-ghost" onClick={() => setIsModalOpen(false)}>
              H·ªßy
            </button>
            <button className="btn btn-primary" onClick={() => setIsModalOpen(false)}>
              {tab === "checkin" ? "Ho√†n t·∫•t giao xe" : "Ho√†n t·∫•t nh·∫≠n xe"}
            </button>
          </>
        }
      >
        {selectedItem && (
          <div style={{ display: "flex", flexDirection: "column", gap: "16px" }}>
            <div style={{ background: "var(--bg-secondary)", padding: "12px", borderRadius: "8px" }}>
              <div style={{ display: "grid", gridTemplateColumns: "1fr 1fr", gap: "8px", fontSize: "14px" }}>
                <div>
                  <strong>Kh√°ch h√†ng:</strong> {selectedItem.customer}
                </div>
                <div>
                  <strong>SƒêT:</strong> {selectedItem.phone}
                </div>
                <div>
                  <strong>Xe:</strong> {selectedItem.vehicle}
                </div>
                <div>
                  <strong>Th·ªùi gian:</strong> {selectedItem.time || selectedItem.returnTime}
                </div>
              </div>
            </div>

            <div>
              <label className="label">T√¨nh tr·∫°ng xe</label>
              <div style={{ display: "grid", gridTemplateColumns: "repeat(2, 1fr)", gap: "8px", marginTop: "8px" }}>
                {["Th√¢n xe", "ƒê√®n", "L·ªëp", "N·ªôi th·∫•t", "Pin", "K√≠nh"].map((item) => (
                  <label key={item} style={{ display: "flex", alignItems: "center", gap: "8px", cursor: "pointer" }}>
                    <input type="checkbox" defaultChecked />
                    <span style={{ fontSize: "14px" }}>{item}</span>
                  </label>
                ))}
              </div>
            </div>

            <div>
              <label className="label">Ch·ª•p ·∫£nh xe (4 g√≥c + dashboard)</label>
              <button className="btn btn-ghost" style={{ width: "100%", marginTop: "8px" }}>
                üì∑ Ch·ª•p ·∫£nh ({checkInForm.photos.length}/5)
              </button>
            </div>

            <div>
              <label className="label">Ghi ch√∫</label>
              <textarea
                className="input"
                rows={3}
                placeholder="Ghi ch√∫ v·ªÅ t√¨nh tr·∫°ng xe, v·∫•n ƒë·ªÅ ph√°t sinh..."
                value={checkInForm.notes}
                onChange={(e) => setCheckInForm({ ...checkInForm, notes: e.target.value })}
                style={{ marginTop: "8px", resize: "vertical" }}
              />
            </div>

            <div style={{ background: "#fef3c7", padding: "12px", borderRadius: "8px", fontSize: "13px" }}>
              ‚ö†Ô∏è <strong>L∆∞u √Ω:</strong> Vui l√≤ng ki·ªÉm tra k·ªπ t√¨nh tr·∫°ng xe v√† ch·ª•p ·∫£nh ƒë·∫ßy ƒë·ªß tr∆∞·ªõc khi {tab === "checkin" ? "giao" : "nh·∫≠n"} xe
            </div>
          </div>
        )}
      </Modal>

      {/* Verify Modal */}
      <Modal
        isOpen={isModalOpen && tab === "verify"}
        onClose={() => setIsModalOpen(false)}
        title="X√°c th·ª±c kh√°ch h√†ng"
        maxWidth={600}
        footer={
          <>
            <button className="btn btn-ghost" onClick={() => setIsModalOpen(false)}>
              H·ªßy
            </button>
            <button
              className="btn btn-primary"
              disabled={!verifyForm.licenseVerified || !verifyForm.idVerified}
              onClick={() => setIsModalOpen(false)}
            >
              X√°c nh·∫≠n
            </button>
          </>
        }
      >
        {selectedItem && (
          <div style={{ display: "flex", flexDirection: "column", gap: "16px" }}>
            <div style={{ background: "var(--bg-secondary)", padding: "12px", borderRadius: "8px" }}>
              <div style={{ fontSize: "14px" }}>
                <div style={{ marginBottom: "4px" }}>
                  <strong>Kh√°ch h√†ng:</strong> {selectedItem.customer}
                </div>
                <div>
                  <strong>SƒêT:</strong> {selectedItem.phone}
                </div>
              </div>
            </div>

            <div>
              <label style={{ display: "flex", alignItems: "center", gap: "12px", cursor: "pointer" }}>
                <input
                  type="checkbox"
                  checked={verifyForm.licenseVerified}
                  onChange={(e) => setVerifyForm({ ...verifyForm, licenseVerified: e.target.checked })}
                />
                <div>
                  <div style={{ fontWeight: 600 }}>Gi·∫•y ph√©p l√°i xe</div>
                  <div style={{ fontSize: "13px", color: "var(--muted)" }}>
                    Ki·ªÉm tra gi·∫•y ph√©p c√≤n h·∫°n, ƒë·ªëi chi·∫øu ·∫£nh, h·ªç t√™n, s·ªë GPLX
                  </div>
                </div>
              </label>
            </div>

            <div>
              <label style={{ display: "flex", alignItems: "center", gap: "12px", cursor: "pointer" }}>
                <input
                  type="checkbox"
                  checked={verifyForm.idVerified}
                  onChange={(e) => setVerifyForm({ ...verifyForm, idVerified: e.target.checked })}
                />
                <div>
                  <div style={{ fontWeight: 600 }}>CMND/CCCD</div>
                  <div style={{ fontSize: "13px", color: "var(--muted)" }}>
                    Ki·ªÉm tra gi·∫•y t·ªù tu·ª≥ th√¢n, ƒë·ªëi chi·∫øu v·ªõi h·ªì s∆° tr√™n h·ªá th·ªëng
                  </div>
                </div>
              </label>
            </div>

            <div style={{ background: "#dbeafe", padding: "12px", borderRadius: "8px", fontSize: "13px" }}>
              üí° <strong>H∆∞·ªõng d·∫´n:</strong> ƒê·ªëi chi·∫øu k·ªπ th√¥ng tin tr√™n gi·∫•y t·ªù v·ªõi h·ªì s∆° ƒëƒÉng k√Ω. N·∫øu ph√°t hi·ªán sai l·ªách, li√™n h·ªá Admin ngay.
            </div>
          </div>
        )}
      </Modal>

      {/* Delete Confirmation Modal */}
      <Modal
        isOpen={deleteModalOpen}
        onClose={() => setDeleteModalOpen(false)}
        title="X√°c nh·∫≠n x√≥a"
        maxWidth={500}
        footer={
          <>
            <button className="btn btn-ghost" onClick={() => setDeleteModalOpen(false)}>
              H·ªßy
            </button>
            <button
              className="btn btn-primary"
              style={{ background: "#ef4444" }}
              onClick={handleConfirmDelete}
            >
              üóëÔ∏è X√°c nh·∫≠n x√≥a
            </button>
          </>
        }
      >
        {itemToDelete && (
          <div>
            <div style={{ 
              background: "#fef2f2", 
              border: "1px solid #fecaca", 
              borderRadius: "8px", 
              padding: "16px",
              marginBottom: "16px"
            }}>
              <p style={{ margin: 0, color: "#991b1b", fontSize: "14px" }}>
                ‚ö†Ô∏è <strong>C·∫£nh b√°o:</strong> B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a m·ª•c n√†y kh√¥ng? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.
              </p>
            </div>
            <div style={{ background: "var(--bg-secondary)", padding: "12px", borderRadius: "8px" }}>
              {Object.entries(itemToDelete).slice(0, 4).map(([key, value]) => (
                <div key={key} style={{ marginBottom: "8px" }}>
                  <strong style={{ textTransform: "capitalize" }}>{key}:</strong> {String(value)}
                </div>
              ))}
            </div>
          </div>
        )}
      </Modal>
    </>
  );
}


